const express = require('express');
const multer = require('multer');
const sql = require('mssql');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

app.use(express.urlencoded({ extended: true }));

// 🔹 Database Configuration
const dbConfig = {
    user: 'sa',
    password: 'dotnetuser',
    server: 'SMT-16',
    database: 'kk',
    options: { encrypt: false, trustServerCertificate: true }
};

sql.connect(dbConfig)
    .then(() => console.log("✅ Connected to SQL Server"))
    .catch(err => console.error("❌ Database Connection Failed:", err));

const upload = multer({ storage: multer.memoryStorage()});

// 🔹 Register Employee (POST)
app.post('/register', upload.single('photo'), async (req, res) => {
    try {
        const { EmpID, EmpName, Email, Phone, DOB, DOJ, Address, Designation, Place, Department, AccountNo, IFSC, BankName, CTC } = req.body;
        const photo = req.file ? req.file.buffer : null;

        const request = new sql.Request();
        request.input('EmpID', sql.NVarChar, EmpID);
        request.input('EmpName', sql.NVarChar, EmpName);
        request.input('Email', sql.NVarChar, Email);
        request.input('Phone', sql.NVarChar, Phone);
        request.input('DOB', sql.Date, DOB);
        request.input('DOJ', sql.Date, DOJ);
        request.input('Address', sql.NVarChar, Address);
        request.input('Designation', sql.NVarChar, Designation);
        request.input('Place', sql.NVarChar, Place);
        request.input('Department', sql.NVarChar, Department);
        request.input('AccountNo', sql.NVarChar, AccountNo);
        request.input('IFSC', sql.NVarChar, IFSC);
        request.input('BankName', sql.NVarChar, BankName);
        request.input('CTC', sql.Decimal, CTC);
        request.input('Photo', sql.VarBinary, photo);

        await request.query(`
            INSERT INTO Employee (EmpID, EmpName, Email, Phone, DOB, DOJ, Address, Designation, Place, Department, AccountNo, IFSC, BankName, CTC, Photo) 
            VALUES (@EmpID, @EmpName, @Email, @Phone, @DOB, @DOJ, @Address, @Designation, @Place, @Department, @AccountNo, @IFSC, @BankName, @CTC, @Photo)
        `);

        res.json({ success: true, message: "Employee registered successfully" });
    } catch (error) {
        console.error("❌ Error registering employee:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// 🔹 GET Employee by EmpID
app.get('/employee/:EmpID', async (req, res) => {
    try {
        const empID = req.params.EmpID.trim(); // Keep EmpID as a string

        if (!empID) {
            return res.status(400).json({ error: "Employee ID cannot be empty" });
        }

        const request = new sql.Request();
        request.input('EmpID', sql.NVarChar, empID); // Treat EmpID as a string

        const result = await request.query("SELECT * FROM Employee WHERE EmpID = @EmpID");

        if (result.recordset.length === 0) {
            return res.status(404).json({ error: "Employee not found" });
        }

        const employee = result.recordset[0];

        // Convert image to Base64 if it exists
        if (employee.Photo) {
            employee.Photo = Buffer.from(employee.Photo).toString('base64');
        }
        res.json(employee);
    } catch (error) {
        console.error("❌ Error fetching employee:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});


app.put('/update', async (req, res) => {
    const { value } = req.body;
    if (!value) {
      return res.status(400).json({ error: 'Value is required' });
    }
  
    try {
      const request = new sql.Request();
      request.input('EmpID', sql.NVarChar, value);
      await request.query('UPDATE sample SET eid = @EmpID WHERE id = 1');
  
      res.json({ message: 'Value updated successfully' });
    } catch (error) {
      console.error('Error updating database:', error);
      res.status(500).json({ error: 'Database update failed' });
    }
  });
  
  // API to get the stored value
  app.get('/retrieve', async (req, res) => {
    try {
      const request = new sql.Request();
      const result = await request.query('SELECT eid FROM sample WHERE id = 1');
  
      if (result.recordset.length > 0) {
        res.json({ value: result.recordset[0].eid });
      } else {
        res.json({ value: null });
      }
    } catch (error) {
      console.error('Error retrieving data:', error);
      res.status(500).json({ error: 'Database retrieval failed' });
    }
  });
  

// 🔹 Start Server
const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
